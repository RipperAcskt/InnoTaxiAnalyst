// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RipperAcskt/innotaxianalyst/internal/service (interfaces: UserService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/RipperAcskt/innotaxi/pkg/proto"
	client "github.com/RipperAcskt/innotaxianalyst/internal/client"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetJWT mocks base method.
func (m *MockUserService) GetJWT(arg0 context.Context, arg1 uuid.UUID) (*client.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWT", arg0, arg1)
	ret0, _ := ret[0].(*client.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWT indicates an expected call of GetJWT.
func (mr *MockUserServiceMockRecorder) GetJWT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWT", reflect.TypeOf((*MockUserService)(nil).GetJWT), arg0, arg1)
}

// SetRating mocks base method.
func (m *MockUserService) SetRating(arg0 context.Context, arg1 *proto.Rating) (*proto.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRating", arg0, arg1)
	ret0, _ := ret[0].(*proto.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRating indicates an expected call of SetRating.
func (mr *MockUserServiceMockRecorder) SetRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRating", reflect.TypeOf((*MockUserService)(nil).SetRating), arg0, arg1)
}
