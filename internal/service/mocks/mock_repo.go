// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RipperAcskt/innotaxianalyst/internal/service (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/RipperAcskt/innotaxianalyst/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetRating mocks base method.
func (m *MockRepo) GetRating(arg0 context.Context, arg1 string) ([]model.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", arg0, arg1)
	ret0, _ := ret[0].([]model.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockRepoMockRecorder) GetRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockRepo)(nil).GetRating), arg0, arg1)
}

// SetRatingDriver mocks base method.
func (m *MockRepo) SetRatingDriver(arg0 context.Context, arg1 model.Rating) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRatingDriver", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRatingDriver indicates an expected call of SetRatingDriver.
func (mr *MockRepoMockRecorder) SetRatingDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRatingDriver", reflect.TypeOf((*MockRepo)(nil).SetRatingDriver), arg0, arg1)
}

// SetRatingUser mocks base method.
func (m *MockRepo) SetRatingUser(arg0 context.Context, arg1 model.Rating) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRatingUser", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRatingUser indicates an expected call of SetRatingUser.
func (mr *MockRepoMockRecorder) SetRatingUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRatingUser", reflect.TypeOf((*MockRepo)(nil).SetRatingUser), arg0, arg1)
}

// WriteDriver mocks base method.
func (m *MockRepo) WriteDriver(arg0 model.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteDriver indicates an expected call of WriteDriver.
func (mr *MockRepoMockRecorder) WriteDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteDriver", reflect.TypeOf((*MockRepo)(nil).WriteDriver), arg0)
}

// WriteOrder mocks base method.
func (m *MockRepo) WriteOrder(arg0 model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOrder indicates an expected call of WriteOrder.
func (mr *MockRepoMockRecorder) WriteOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOrder", reflect.TypeOf((*MockRepo)(nil).WriteOrder), arg0)
}

// WriteUser mocks base method.
func (m *MockRepo) WriteUser(arg0 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteUser indicates an expected call of WriteUser.
func (mr *MockRepoMockRecorder) WriteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUser", reflect.TypeOf((*MockRepo)(nil).WriteUser), arg0)
}
